/*
 * This source file was generated by the Gradle 'init' task
 */
package bitcamp.project1.DongIn;

import java.util.Date;
import java.util.LinkedList;
import bitcamp.project1.DongIn.util.Prompt;
import bitcamp.project1.DongIn.vo.Category.DepositCategory;
import bitcamp.project1.DongIn.vo.Category.WithdrawCategory;
import bitcamp.project1.DongIn.vo.MoneyFlow;
import bitcamp.project1.DongIn.vo.Payment.PaymentMethod;


public class App {

    public static String Title = "-----reach to rich-----";
    public static String[] menus = {"작성", "조회", "수정", "삭제", "종료"};
    public static LinkedList accountBook = new LinkedList();

    public static void main(String[] args) {

        int selectMenu = 0;

        System.out.println(Title);
        for (int i = 0; i < menus.length; i++) {
            System.out.println((i + 1) + ". " + menus[i]);
        }

        mainLoop:
        while (true) {
            selectMenu = Prompt.inputInt("메인 >>");

            switch (selectMenu) {
                case 1:
                    executeCreate();
                    //sortByDate(accountBook);
                    break;
                case 2:
                    executeRead();
                    break;
                case 3:
                    executeUpdate();
                    //sortByDate(accountBook);
                    break;
                case 4:
                    executeDelete();
                    break;
                case 5:
                    break mainLoop;
                default:
                    System.out.println("올바른 메뉴를 선택하세요");
                    break;
            }
        }

        System.out.println("프로그램을 종료합니다.");

    }

    public static void printByYear(LinkedList accountBook) {

        printAccountBook(accountBook);
    }

    public static void printByMonth(LinkedList accountBook) {

        printAccountBook(accountBook);
    }

    public static void printByWeek(LinkedList accountBook) {

        printAccountBook(accountBook);
    }

    public static void printByDate(LinkedList accountBook) {

        printAccountBook(accountBook);
    }

    public static void printAccountBook(LinkedList accountBook) {
        System.out.println(Title);
        System.out.println(
            "No |   날짜   |     수입     |     지출     |     잔액     |   항목   | 결제방식 |     note");
        System.out.println(
            "-------------------------------------------------------------------------------------------------------------");
        int balance = 0;

        for (int i = 0; i < accountBook.size(); i++) {
            MoneyFlow mf = (MoneyFlow) accountBook.get(i);

            int income = 0;
            int spend = 0;
            if (mf.getIncomeOrSpend().equals("수입")) {
                income = mf.getAmount();
                balance += income;
            } else {
                spend = mf.getAmount();
                balance -= spend;
            }

            System.out.printf("%02d |%s| %,12d | %,12d | %,12d | %s | %s | %s\n", mf.getIndex(),
                mf.getTransactionDateByString(), income, spend, balance, mf.getCategory(),
                mf.getPaymentMethod().toString(), mf.getNote());
        }
    }

    public static void sortByDate(LinkedList accountBook, MoneyFlow newMoneyFlow) {
        for (int i = 0; i < accountBook.size(); i++) {
            MoneyFlow oldMoneyFlow = (MoneyFlow) accountBook.get(i);

            if (oldMoneyFlow.getTransactionDate().before(newMoneyFlow.getTransactionDate())) {
                accountBook.add(i, newMoneyFlow);
            }
        }
    }

    public static void executeCreate() {

        Date date = Prompt.inputDate("날짜 (yyyy-mm-dd, default = today) >>");

        String incomeOrSpend = inputIncomeOrSpend("수입/지출 선택 >>");
        int amount = inputAmount("금액 >>");

        String paymentMethod = "";
        if (incomeOrSpend.equals("수입")) {
            paymentMethod = "        ";
        } else if (incomeOrSpend.equals("지출")) {
            paymentMethod = inputPaymentMethod("결제수단 선택 >>");
        }
        String category = inputCategory(incomeOrSpend, "항목 선택 >>");
        String note = inputNote("설명 >>");

        MoneyFlow moneyFlow = new MoneyFlow(accountBook.size(), date, amount, incomeOrSpend,
            category,
            note, paymentMethod);

        int addIndex = 0;
        for (addIndex = 0; addIndex < accountBook.size(); addIndex++) {
            MoneyFlow oldMoneyFlow = (MoneyFlow) accountBook.get(addIndex);

            if (oldMoneyFlow.getTransactionDate().after(moneyFlow.getTransactionDate())) {
                break;
            }
        }

        accountBook.add(addIndex, moneyFlow);

    }

    public static int inputAmount(String message, Object... args) {
        while (true) {
            try {
                int amount = Prompt.inputInt(message);
                return amount;
            } catch (NumberFormatException e) {
                System.out.println("올바른 금액을 입력하세요.");
            }
        }
    }

    public static String inputIncomeOrSpend(String message, Object... args) {
        while (true) {
            try {
                System.out.println("1.   수입");
                System.out.println("2.   지출");

                int incomeOrSpend = Prompt.inputInt(message);

                switch (incomeOrSpend) {
                    case 1:
                        return "수입";
                    case 2:
                        return "지출";
                    default:
                        System.out.println("올바른 항목을 선택해주세요.");
                }
            } catch (NumberFormatException e) {
                System.out.println("숫자로 입력해주세요.");
            }
        }
    }

    public static String inputCategory(String incomeOrSpend, String message, Object... args) {
        while (true) {
            try {
                if (incomeOrSpend.equals("수입")) {
                    for (int i = 0; i < DepositCategory.values().length; i++) {
                        System.out.println(i + 1 + ". " + DepositCategory.values()[i].getName());
                    }

                    int inputCategory = Prompt.inputInt(message);

                    if (0 < inputCategory && inputCategory < DepositCategory.values().length + 1) {
                        return DepositCategory.values()[inputCategory - 1].getName();
                    } else {
                        System.out.println("올바른 항목을 선택하세요. ");
                    }
                } else if (incomeOrSpend.equals("지출")) {
                    for (int i = 0; i < WithdrawCategory.values().length; i++) {
                        System.out.println(i + 1 + ". " + WithdrawCategory.values()[i].getName());
                    }

                    int inputCategory = Prompt.inputInt(message);

                    if (0 < inputCategory && inputCategory < WithdrawCategory.values().length + 1) {
                        return WithdrawCategory.values()[inputCategory - 1].getName();
                    } else {
                        System.out.println("올바른 항목을 선택하세요. ");
                    }
                } else {
                    return null;
                }
            } catch (NumberFormatException e) {
                System.out.println("숫자로 입력해주세요.");
            }
        }
    }

    public static String inputNote(String message, Object... args) {
        return Prompt.input(message);
    }

    public static String inputPaymentMethod(String message, Object... args) {
        while (true) {
            try {
                for (int i = 0; i < PaymentMethod.values().length; i++) {
                    System.out.println(i + 1 + ". " + PaymentMethod.values()[i].getName());
                }
                int inputPaymentMethod = Prompt.inputInt(message);

                if (0 < inputPaymentMethod
                    && inputPaymentMethod < PaymentMethod.values().length + 1) {
                    return PaymentMethod.values()[inputPaymentMethod - 1].getName();
                } else {
                    System.out.println("올바른 항목을 선택하세요. ");
                }
            } catch (NumberFormatException e) {
                System.out.println("숫자로 입력해주세요.");
            }
        }
    }


    public static void executeRead() {
        printAccountBook(accountBook);

    }

    public static void executeUpdate() {
        printAccountBook(accountBook);

        int index = Prompt.inputInt("수정 할 기록의 index : ");

        MoneyFlow updateMF = (MoneyFlow) accountBook.get(index);

        Date date =
            Prompt.inputDate("date 변경 (" + updateMF.getTransactionDateByString() + ") :");
        String incomeOrSpend =
            inputIncomeOrSpend("수입 or 지출 변경 (" + updateMF.getIncomeOrSpend() + ") : ");
        int amount =
            inputAmount("금액 변경 (" + updateMF.getAmount() + ") : ");
        String paymentMethod =
            inputPaymentMethod("결제 수단 변경 (" + updateMF.getPaymentMethod().toString() + ") :");
        String category =
            inputCategory(updateMF.getIncomeOrSpend(), "항목 변경 (" + updateMF.getCategory() + ") :");
        String note =
            inputNote("설명 변경 (" + updateMF.getNote() + ") :");

        MoneyFlow updatedMoneyFlow = new MoneyFlow(accountBook.size(), date, amount, incomeOrSpend,
            category,
            note, paymentMethod);

        int addIndex = 0;
        for (addIndex = 0; addIndex < accountBook.size(); addIndex++) {
            MoneyFlow oldMoneyFlow = (MoneyFlow) accountBook.get(addIndex);

            if (oldMoneyFlow.getTransactionDate().after(updatedMoneyFlow.getTransactionDate())) {
                break;
            }
        }

        accountBook.set(addIndex, updatedMoneyFlow);


    }

    public static void executeDelete() {
        printAccountBook(accountBook);

        int index = Prompt.inputInt("삭제 할 기록의 index : ");

        accountBook.remove(index - 1);
    }

}

